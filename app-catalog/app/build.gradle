/*
 * Copyright 2022 Google LLC
 * Copyright 2023-2024 wintmain
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * NOTE: This file has been modified by wintmain
 * Modifications are licensed under the License.
 */

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'com.wintmain.catalog.app'
    compileSdk 34

    defaultConfig {
        applicationId "com.wintmain.catalog.app"
        minSdk 26
        targetSdk 34
        versionCode 20240928
        versionName 'V20240928'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig false
        compose true
        dataBinding true
        aidl true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.composeCompiler.get()
    }

    lint {
        checkReleaseBuilds false
        textOutput file('stdout')
        textReport true
    }
}

dependencies {
    // Include all available samples dynamically imported in settings.gradle
    gradle.ext.samples.each {
        implementation project("$it")
    }

    def composeBom = platform(libs.compose.bom)
    implementation composeBom
    androidTestImplementation composeBom
    implementation libs.material

    // Replace with remote.
    implementation(libs.casa.ui)

    // Required by CASA to generate the wiring logic
    implementation libs.hilt.android
    ksp libs.hilt.compiler

    // 测试依赖
    androidTestImplementation libs.androidx.test.runner
    testImplementation libs.androidx.test.runner
    // libs.androidx.testext 必须和上面的 runner 一起；AS自动创建的'androidTest'会用到
    androidTestImplementation libs.androidx.test.ext.junit
    testImplementation libs.androidx.test.ext.junit

    // App中集成CodeLocator: https://github.com/bytedance/CodeLocator
    // 暂时禁用
//    debugImplementation libs.codelocator.core
}
